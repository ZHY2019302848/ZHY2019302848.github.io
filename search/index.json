[{"content":"Wonder3D环境配置 项目仓库\n项目论文\n准备系统环境 系统为ubuntu18.04以上系统，anaconda环境装好，cuda版本为11.8或11.7，测试用12.2会报错，gcc版本8以上，python3.8以上，显卡确保显存足够，我先后在2080ti和titan显卡上均测试过，cuda版本为11.3和11.2，都会报cuda和pytorch版本不匹配的错，最后在4090上成功运行，所以一个准确合适的环境是重要前提。\n安装环境 只要上一步系统环境准备完好，接下来依照官方教程即可\n1 2 conda create -n wonder3d python=3.10 #这里用3.10是怕再有奇怪的报错，所以把版本调高 conda activate wonder3d 这两步结束后，先查看python和pip的路径是conda虚拟环境，用which python和which pip查询，如果返回时虚拟环境的路径，可以跳过这一步骤，如果不是 ，显示为local路径，可以先退出现在的base环境，然后在换回来wonder3d环境\n1 2 3 conda deactivate #退出wonder3d conda deactivate #退出base conda activate wonder3d #重新激活环境 下面是项目下载和必要环境的安装\n1 2 3 4 git clone https://github.com/xxlong0/Wonder3D #这里如果速度慢可以参考上一篇\u0026#34;服务器网络问题解决方案\u0026#34;，但这个只能用于大学教研室或是公司本地服务器 cd Wonder3D pip install -r requirements.txt #这要下很久，可以去泡杯茶 pip install git+https://github.com/NVlabs/tiny-cuda-nn/#subdirectory=bindings/torch #这里很容易出问题，大部分问题都可以在\u0026#34;准备系统环境\u0026#34;中解决 安装完后看一下自己torch是否安装成功\n1 python 1 2 3 import torch print(torch.__verison__)#查看版本号是否对应后退出即可 exit() 运行项目 先下载checkpoint文件复制到指定目录下\n1 2 3 4 5 Wonder3D |-- ckpts |-- unet |-- scheduler.bin ... 之后可以直接运行命令看一下效果，代码会默认跑一只猫头鹰\n1 bash run_test.sh 同理，此处出现错误请返回系统环境和安装环境这两个步骤查看是否出错，如果按照错误提示打补丁很可能越补窟窿越大 运行完成后可以在./outputs下查找相关文件，应该6个一一对应的法线图和色彩图\n之后生成mesh obj文件，这里我只试了官方的第一种方法\n1 2 3 4 cd ./instant-nsr-pl bash run.sh output_folder_path scene_name #第二条命令示例为: bash run.sh ../outputs/cropsize-192-cfg3.0 owl 生成完成后可以用ls命令找哪个文件夹是新生成的说明obj文件就存在哪了\n如果想要替换自己的图片，先把图片的背景去掉，在线网站就可以完成，然后去找/wonder/configs/mvdiffusion-joint-ortho-6views.yaml，修改如下内容即可 尝试其他图片 我用该方法尝试了下最近师姐让找的car图片，因为该项目训练时没有车的训练模型，所以图生3D的效果不是十分理想。\ncar1 car2 car3 总结 锻炼了自己的环境配置功力，还有在项目介绍看到可以使用正交相机来完成对obj色彩的显示，原文如下：\nOur generated normals and color images are defined in orthographic views, so the reconstructed mesh is also in orthographic camera space. If you use MeshLab to view the meshes\n这个可以帮到我最近在研究的对对房屋mesh涂上迷彩的问题。\n","date":"2023-11-15T19:37:07+08:00","image":"https://ZHY2019302848.github.io/p/%E5%AE%9E%E8%B7%B5/fig_teaser_hu5f338f1929158fc1dbd893b6f223493f_1271319_120x120_fill_box_smart1_3.png","permalink":"https://ZHY2019302848.github.io/p/%E5%AE%9E%E8%B7%B5/","title":"Wonder3D项目环境配置和运行"},{"content":"对服务器网络问题的总结 最近使用实验室linux服务器跑代码，对其中频繁出现的网络问题烦不胜烦，诸如git和pip问题层出不穷，其中的问题不是简单换一个清华源可以，根源性需要让服务器走中转代理，实现完全性翻墙（该方法仅对内网有用）。\n现在把其中常见的命令总结如下，方便以后快捷使用。\ngit的代理设置 先对clash进行设置\n1 2 3 4 5 6 git config --global http.proxy socks5 127.0.0.1:7890 #端口号参考clash git config --global https.proxy socks5 127.0.0.1:7890 #端口前面的ip地址参考开clash的主机ip git config --global https.proxy 127.0.0.1:7890 git config --global https.proxy 127.0.0.1:7890 如果报错提示不让写入修改，在最后加入--replace-all，代码如下\n1 2 git config --global https.proxy 127.0.0.1:7890 --replace-all git config --global https.proxy 127.0.0.1:7890 --replace-all 服务器全局设置 考虑到有些工具无法设置代理，所以使用全局代理，但这种方式在针对ICMP协议时会失效，因为使用的代理走的都是会话层，无法影响到ip报文解包的结果。\n代码如下\n1 2 3 export proxy=\u0026#34;http://127.0.0.1:7890\u0026#34; ##ip和端口地址按情况替换 export https_proxy=$proxy export http_proxy=$proxy 效果 可以让torch的安装速度从几百k涨到最高10mb/s。\n备注\n如果无法正常部署博客到github.io，请检查标题里是不是把草稿draft设置为了true，之后再运行如下命令\n1 2 hugo hugo --gc --minify --cleanDestinationDir ","date":"2023-11-10T15:34:23+08:00","image":"https://ZHY2019302848.github.io/p/linux-network/linux_network_hu0f0ae4cf8191179714ea2b2d64d558ac_81456_120x120_fill_q75_box_smart1.jpg","permalink":"https://ZHY2019302848.github.io/p/linux-network/","title":"服务器网络问题解决方案"}]